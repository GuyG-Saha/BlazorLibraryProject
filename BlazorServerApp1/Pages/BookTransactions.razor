@page "/transactions"
@inject BlazorServerApp.Shared.BooksRepository BookRepository
@inject NavigationManager Navigation
@using BlazorServerApp.Shared

<h3>Loan or Sell a Book</h3>

@if (books == null)
{
    <p>Loading books...</p>
}
else if (books.Count == 0)
{
    <p>No books available for loan or sale.</p>
}
else
{
    <EditForm Model="transaction" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="book">Book</label>
            <select id="book" @bind="transaction.BookId" class="form-control">
                @foreach (var book in books)
                {
                    <option value="@book.Id">@book.Name (by @book.Author.Name)</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="type">Transaction Type</label>
            <select id="type" @bind="transaction.TransactionType" class="form-control">
                <option value="Loan">Loan</option>
                <option value="Sale">Sale</option>
            </select>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="transaction.Quantity" class="form-control" />
            <ValidationMessage For="@(() => transaction.Quantity)" />
        </div>

        <div class="form-group">
            <label for="loaner">Loaner Details (if applicable)</label>
            <textarea id="loaner" @bind="transaction.LoanerDetails" class="form-control" rows="3"></textarea>
        </div>

        <button type="submit" class="btn btn-primary">Submit Transaction</button>
    </EditForm>
}
@code {
    private List<Book> books;
    private BookTransaction transaction = new BookTransaction
    {
            LoanerDetails = string.Empty // Initialize LoanerDetails
    };

    protected override async Task OnInitializedAsync()
    {
        books = BookRepository.GetBooksJoinAuthors();
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            await BookRepository.AddBookTransactionsAsync(transaction);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred: {ex.Message}");
        }
    }
}
